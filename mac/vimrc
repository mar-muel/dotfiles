" Various configs
syntax on
set ttyfast "more characters will be sent to the screen for redrawing
set encoding=utf-8

"time waited for key press(es) to complete. It makes for a faster key response
set ttimeout
set ttimeoutlen=50

" incremental search
" set incsearch
"searches are case insensitive unless they contain at least one capital letter
set ignorecase
set smartcase

" Minimal status line (filepath, modified flag)
set statusline=%F\ %m

set backspace=indent,eol,start "make backspace behave properly in insert mode
set nofoldenable  "disable folding
set nocompatible "Dont use vi features
set number  "Use line numbers
set history=100  "Use more memory
"set hlsearch   "highlight when search
set showmatch  "highlight matching parenthesis
let mapleader = ","
"set relativenumber
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*/.git/*,*/.DS_Store,*/.idea

set fillchars+=vert:\  " Get rid of seperator line
" no sounds
set noeb vb t_vb=
au GUIEnter * set vb t_vb=
set scrolloff=5 " make cursor always have n lines above/below
" set autochdir
autocmd BufEnter * silent! lcd %:p:h  " change the window-local directory to be the same as the directory of the current file
set tags=.git/tags;

" Tabs
set nowrap
set tabstop=2 "Display text with tabs as n columns
set expandtab  "Convert tab into spaces when using tab
set shiftwidth=2  "Indentation when using > and <
set autoindent  "Applies current indentation to next line when hitting o or O
set smartindent "Syntax dependent indentation
set softtabstop=2 "How many columns to add when using TAB in insert mode
autocmd FileType python setlocal expandtab shiftwidth=4 softtabstop=4
autocmd FileType yaml,yml setlocal ts=2 sts=2 sw=2 expandtab

" Use :retab to apply those settings to new file!

" reload files changed outside vim
set autoread

" Vundle
filetype off " Needed for vundle to work
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle
Plugin 'VundleVim/Vundle.vim'
"Plugin 'Valloric/YouCompleteMe'  "auto-complete any language
"Plugin 'davidhalter/jedi-vim'
Plugin 'jiangmiao/auto-pairs'   "Smart auto pair brackets
Plugin 'flazz/vim-colorschemes' "Download all colorschemes
Plugin 'tomtom/tcomment_vim'  "commenting any language
Plugin 'tpope/vim-surround'   "for html tags
Plugin 'tpope/vim-repeat'     " make vim-surround repeatable
Plugin 'tpope/vim-fugitive'     " git integration
Plugin 'stsewd/fzf-checkout.vim'     " git checkout with fzf
Plugin 'ervandew/supertab'  "Making ultisnips compatible with YCM
Plugin 'SirVer/ultisnips'   "Engine for snippets
Plugin 'honza/vim-snippets' " Snippets are separated from the engine
Plugin 'junegunn/fzf' "Fuzzy file finder, requires brew install fzf (on Mac)
Plugin 'junegunn/fzf.vim' "Fuzzy file finder, requires brew install fzf (on Mac)
Plugin 'jpalardy/vim-slime'   " tmux integration for vim
Plugin 'nvie/vim-flake8'   " Python linting

" Markdown syntax highlighting
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'

" Python stuff
Plugin 'heavenshell/vim-pydocstring' "Generate Python docstrings
Plugin 'tmhedberg/SimpylFold'  "Allows better folding in python

" JS stuff
Plugin 'pangloss/vim-javascript' " some js syntax highlighting
Plugin 'mxw/vim-jsx' " jsx support
Plugin 'alvan/vim-closetag' " Closes arbitrary jsx tags
let g:closetag_filenames = '*.html,*.xhtml,*.phtml,*.js,*.jsx'

let g:jsx_ext_required = 0 " do allow js files to contain jsx jsx-code

call vundle#end() "required
filetype plugin indent on "required

" key remappings
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
inoremap jj <ESC>
"nnoremap <leader>m :!%:p<Enter>   "execute current file
"imap </ <C-X><C-O><C-X>  "doesn't work for some reason
"this makes python comments indent
inoremap # X<BS>#
nnoremap <space> za

" Set paste toggle in order to paste without messed up tab structure
set pastetoggle=<F10>
"OR use "+p or :set paste and after :set nopaste

" Comma motions
nmap di, f,dT,
nmap ci, f,cT,

" Move lines
no <down> ddp
no <up> ddkP

" Make Y behave like C, D, etc.
nnoremap Y y$

" Center on } and * and n and L/H/M
nnoremap } }zz
nnoremap { {zz
nnoremap * *zz
nnoremap n nzz
nnoremap N Nzz
nnoremap L Lzz
nnoremap H Hzz
nnoremap M Mzz
nnoremap M Mzz

" Keeps your cursor at the same position when doing J
nnoremap J mzJ`z

" Undo break points: when hitting u, only goes back to the last , or .
inoremap , ,<c-g>u
inoremap . .<c-g>u
inoremap ! !<c-g>u
inoremap ? ?<c-g>u

" Flake8
autocmd FileType python map <buffer> <leader>f :call flake8#Flake8()<CR>

" fzf.vim
" Make sure that if within git directory, search from within project root,
" otherwise just call :Files
nmap <C-P> :ProjectFiles<CR>
command! ProjectFiles execute 'Files' s:find_git_root()
function! s:find_git_root()
    return system('git rev-parse --show-toplevel 2> /dev/null')[:-2]
endfunction
let g:fzf_layout = { 'window': { 'width': 0.8, 'height': 0.8 } }

" fzf-checkout
nmap <leader>gc :GCheckout<CR>


" Search in all files using ripgrep
command! -bang -nargs=* Rg
      \ call fzf#vim#grep(
      \   'rg --column --line-number --no-heading --color=always --ignore-case '.shellescape(<q-args>), 1,
      \   <bang>0 ? fzf#vim#with_preview('up:60%')
      \           : fzf#vim#with_preview('right:50%:hidden', '?'),
      \   <bang>0)

nnoremap <C-F> :ProjectRg<space>
command! -bang -nargs=1 ProjectRg
  \ call fzf#vim#grep('rg --line-number --trim  --color=always --smart-case '
  \ .<q-args>.' '.s:find_git_root(), 0)

" Allow saving of files as sudo when I forgot to start vim using sudo.
cmap w!! w !sudo tee > /dev/null %

" Pretty format JSON
com! FormatJSON %!python -m json.tool

" open split panes to right and bottom
set splitbelow
set splitright

" Remove trailing white spaces after save
autocmd BufWritePre * %s/\s\+$//e

" Make sure Markdown syntax highlighting works not only for .markdown but also
" for .md
au BufNewFile,BufFilePre,BufRead *.md set filetype=markdown.pandoc

" tcomment options
nnoremap <leader>h :TCommentAs html<CR>
vnoremap <leader>h :TCommentAs html<CR>

" YouCompleteMe options
let g:ycm_autoclose_preview_window_after_completion=1
nnoremap <leader>g :YcmCompleter GoToDefinitionElseDeclaration<CR>

" supertab options
let g:SuperTabDefaultCompletionType = '<C-n>'
let g:SuperTabCrMapping = 0

" ultisnips options
let g:UltiSnipsSnippetsDir = $HOME.'/dotfiles/snippets'
let g:UltiSnipsEditSplit = 'vertical'
let g:UltiSnipsExpandTrigger = '<tab>'
let g:UltiSnipsJumpForwardTrigger = '<tab>'
let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'
autocmd FileType javascript UltiSnipsAddFiletypes html  " ultisnips allow html in js files
nnoremap <leader>ue :UltiSnipsEdit<CR>

" netrw settings
let g:netrw_banner=0
let g:netrw_winsize=20
let g:netrw_liststyle=3
let g:netrw_localrmdir='rm -r'

" SimpylFold options
set foldlevelstart=20  "Do not fold on start (only when using SimpylFold)

" fugitive remaps
nmap <leader>gf :diffget //2<CR> " merge from left
nmap <leader>gj :diffget //3<CR> " merge from right
nmap <leader>gs :G<CR>

" Color scheme
colorscheme default
hi StatusLine ctermfg=235
hi StatusLineNc ctermfg=235
hi VertSplit ctermfg=235
" set background=light

" Automatically source .vimrc on save
augroup reload_vimrc
    autocmd!
    autocmd BufWritePost $MYVIMRC source $MYVIMRC
augroup END

" Generate PyDocstring (default somehow not working)
nmap <silent> <C-I> <Plug>(pydocstring)

" Open vimrc file
nmap <leader>v :vsp<CR>:e $MYVIMRC<CR>
" Save file
nmap <leader>s :w<CR>
" Call ctags
nmap <leader>t :!ctags -f .git/tags .<CR>
" Open file tree
nnoremap <leader>n :Lexplore<CR>
" Ue previously yanked (e.g. when pasting multiple times)
vnoremap <C-P> "0p

" Run current python file with <leader>m
autocmd FileType python nnoremap <buffer> <leader>m :w<CR>:exec '!python' shellescape(@%, 1)<cr>
autocmd filetype c nnoremap <leader>m :w <bar> exec '!gcc '.shellescape('%').' -o '.shellescape('%:r').' && ./'.shellescape('%:r')<CR>
autocmd filetype cpp nnoremap <leader>m :w <bar> exec '!g++ -Wall -g -std=c++11 '.shellescape('%').' -o '.shellescape('%:r').' && ./'.shellescape('%:r')<CR>
" autocmd filetype tex nnoremap <leader>m :w <bar> exec '!latexmk -pdf -xelatex ' shellescape(@%, 1) '&& open '.shellescape('%:r').'.pdf' <CR>
autocmd filetype tex nnoremap <leader>m :call CompileLatex()<CR>
autocmd filetype sh nnoremap <leader>m :w <bar> exec '!source '.shellescape('%')<cr>

function! CompileLatex()
  let git_root = s:find_git_root()
  let current_dir = getcwd()
  if (git_root == current_dir)
    let tex_file = expand('%:p')
    let aux_file = expand('%:p:r')
    let pdf_file = aux_file . '.pdf'
  else
    let tex_file = git_root . '/main.tex'
    let aux_file = git_root . '/main'
    let pdf_file = git_root . '/main.pdf'
  endif
  cd `=git_root`
  " exec '!pdflatex '.tex_file.' && biber '.aux_file. ' && pdflatex '.tex_file. ' && echo "Compilation successful!"'
  exec '!pdflatex ' . tex_file . ' && biber ' . aux_file . ' && pdflatex '.tex_file. ' && open ' . pdf_file
endfunction

" slime
let g:slime_target = "tmux"
let g:slime_default_config = {"socket_name": 'default', "target_pane": ":.1"}
let g:slime_python_ipython = 1
nmap <leader>a <Plug>SlimeLineSend
xmap <leader>a <Plug>SlimeRegionSend
" Alternativly, use <C-c><C-c> and <C-c>v to open config

" Window movement shortcuts
" move to the window in the direction shown, or create a new window
" Stolen from https://github.com/nicknisi/vim-workshop/blob/master/vimrc
map <C-h> :call WinMove('h')<cr>
map <C-j> :call WinMove('j')<cr>
map <C-k> :call WinMove('k')<cr>
map <C-l> :call WinMove('l')<cr>

function! WinMove(key)
    let t:curwin = winnr()
    exec "wincmd ".a:key
    if (t:curwin == winnr())
        if (match(a:key,'[jk]'))
            wincmd v
        else
            wincmd s
        endif
        exec "wincmd ".a:key
    endif
endfunction

"Copy/pasting on Mac with Terminal.app
" Automatic set paste toggle when CMD+V in insert mode
let &t_SI .= "\<Esc>[?2004h"
let &t_EI .= "\<Esc>[?2004l"
inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()
function! XTermPasteBegin()
    set pastetoggle=<Esc>[201~
    set paste
    return ""
endfunction
" Copy to system clipboard (for visual selection mapping a somewhat crazy hack
" is used to copy the content without copying the full line)
nmap <leader>c :.w !pbcopy<CR><CR>
vnoremap <silent> <leader>c :<CR>:let @a=@" \| execute "normal! vgvy" \| let res=system("pbcopy", @") \| let @"=@a<CR>


" -- git command on current file
fun! GitCommand(command)
  silent! !clear
  exec "!git " . a:command . " %"
endfun
" -- git diff for current file
map <leader>gd :call GitCommand("diff") <CR>
" -- git log for current file
map <leader>gl :call GitCommand("log -p") <CR>
" -- git blame for current file
map <leader>gb :call GitCommand("blame") <CR>

"  python scripts with wrong indentation:
" :%s/^\s*/&&/g
" Remove all control characters in documents:
" :%s/[[:cntrl:]]//g
